import { __rest, __assign } from '../../node_modules/tslib/tslib.es6.js';
import React, { forwardRef } from 'react';
import PropTypes from 'prop-types';
import classNames from '../../node_modules/classnames/index.js';
import { CLink } from '../link/CLink.js';
import { colorPropType } from '../../props.js';

var CListGroupItem = forwardRef(function (_a, ref) {
    var _b;
    var children = _a.children, active = _a.active, className = _a.className, disabled = _a.disabled, color = _a.color, _c = _a.component, component = _c === void 0 ? 'li' : _c, rest = __rest(_a, ["children", "active", "className", "disabled", "color", "component"]);
    var Component = component === 'a' || component === 'button' ? CLink : component;
    rest = __assign(__assign(__assign(__assign({}, ((component === 'a' || component === 'button') && {
        active: active,
        disabled: disabled,
        component: component,
        ref: ref,
    })), (active && { 'aria-current': true })), (disabled && { 'aria-disabled': true })), rest);
    return (React.createElement(Component, __assign({ className: classNames('list-group-item', (_b = {},
            _b["list-group-item-".concat(color)] = color,
            _b['list-group-item-action'] = component === 'a' || component === 'button',
            _b.active = active,
            _b.disabled = disabled,
            _b), className) }, rest), children));
});
CListGroupItem.propTypes = {
    active: PropTypes.bool,
    children: PropTypes.node,
    className: PropTypes.string,
    color: colorPropType,
    component: PropTypes.elementType,
    disabled: PropTypes.bool,
};
CListGroupItem.displayName = 'CListGroupItem';

export { CListGroupItem };
//# sourceMappingURL=CListGroupItem.js.map
